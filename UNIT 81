비트맵 파일(.bmp)을 아스키 코드로 변환하기

#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <stdlib.h>

#define PIXEL_SIZE 3
#define PIXEL_ALIGN 4

#pragma pack(push, 1)

typedef struct _BITMAPFILEHEADER
{
	unsigned short bfType;
	unsigned int bfSize;
	unsigned short bfReserved1;
	unsigned short bfReserved2;
	unsigned int bfOffBits;
} BITMAPFILEHEADER;

typedef struct _BITMAPINFOHEADER
{
	unsigned int biSize;
	int biWidth;
	int biHeight;
	unsigned short biPlanes;
	unsigned short biBitcount;
	unsigned int biCompression;
	unsigned int biSizeImage;
	int biXpelsPerMeter;
	int biYPelsPerMeter;
	unsigned int biClrUsed;
	unsigned int biClrImportant;
} BITMAPINFOHEADER;

typedef struct _RGBTRIPLE
{
	unsigned char rgbtBlue;
	unsigned char rgbtGreen;
	unsigned char rgbtRed;
} RGBTRIPLE;

#pragma pack(pop)

int main()
{
	FILE *fpBmp;
	BITMAPFILEHEADER fileHeader;
	BITMAPINFOHEADER infoHeader;
	
	unsigned char *image;
	char ascii[] = { '#', '#', '@', '%', '=', '+', '*', ':', '-', '.', ' '};

	fpBmp = fopen("sample50x50.bmp", "rb");
	if (fpBmp == NULL)
	{
		return 0;
	}

	if (fread(&fileHeader, sizeof(fileHeader), 1, fpBmp) < 1)
	{
		fclose(fpBmp);
		return 0;
	}

	if (fileHeader.bfType != 'MB')
	{
		fclose(fpBmp);
		return 0;
	}

	if (fread(&infoHeader, sizeof(infoHeader), 1, fpBmp) < 1)
	{
		fclose(fpBmp);
		return 0;
	}

	if (infoHeader.biBitcount != 24)
	{
		fclose(fpBmp);
		return 0;
	}

	int size = infoHeader.biSizeImage;
	int width = infoHeader.biWidth;
	int height = infoHeader.biHeight;

	int padding = (PIXEL_ALIGN - ((width * PIXEL_SIZE) % PIXEL_ALIGN)) % PIXEL_ALIGN;

	if (size == 0)
	{
		size = (width * PIXEL_SIZE + padding) * height;
	}

	image = malloc(size);

	fseek(fpBmp, fileHeader.bfOffBits, SEEK_SET);

	if (fread(image, size, 1, fpBmp) < 1)
	{
		fclose(fpBmp);
		return 0;
	}

	fclose(fpBmp);

	for (int y = height - 1; y >= 0; y--)
	{
		for (int x = 0; x < width; x++)
		{
			int index = x * PIXEL_SIZE + y * (width * PIXEL_SIZE + padding);

			RGBTRIPLE *pixel = (RGBTRIPLE *)&image[index];

			unsigned char value = (pixel->rgbtBlue + pixel->rgbtGreen + pixel->rgbtRed) / PIXEL_SIZE;

			char c = ascii[value * sizeof(ascii) / 256];

			printf("%c%c", c, c);
		}

		printf("\n");
	}

	free(image);

	return 0;
}
